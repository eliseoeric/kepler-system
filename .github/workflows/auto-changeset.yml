name: Auto Changeset

on:
  push:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-changeset:
    name: Create Changesets from Conventional Commits
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'Version Packages') && !contains(github.event.head_commit.message, '[skip changeset]')"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get last release commit
        id: last-release
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            # If no tags, get first commit
            LAST_COMMIT=$(git rev-list --max-parents=0 HEAD)
          else
            LAST_COMMIT=$(git rev-list -n 1 $LAST_TAG)
          fi
          echo "last_commit=$LAST_COMMIT" >> $GITHUB_OUTPUT

      - name: Generate changesets from conventional commits
        run: |
          # Get commits since last release
          COMMITS=$(git log --pretty=format:"%H|%s" ${{ steps.last-release.outputs.last_commit }}..HEAD)

          # Process each commit
          while IFS='|' read -r commit_hash commit_message; do
            if [[ -z "$commit_hash" ]]; then
              continue
            fi
            
            echo "Processing commit: $commit_message"
            
            # Parse conventional commit format: type(scope): description
            if [[ $commit_message =~ ^(feat|fix|perf|refactor|style|test|docs|ci|chore|revert)(\(([^)]+)\))?: ]]; then
              type="${BASH_REMATCH[1]}"
              scope="${BASH_REMATCH[3]}"
              
              # Determine version bump
              case "$type" in
                feat) bump="minor" ;;
                fix|perf) bump="patch" ;;
                *) continue ;; # Skip non-versioned changes
              esac
              
              # Determine affected packages based on scope or changed files
              packages=""
              if [[ -n "$scope" ]]; then
                case "$scope" in
                  ui) packages="@eliseoeric/ui" ;;
                  tokens) packages="@eliseoeric/tokens" ;;
                  forms) packages="@eliseoeric/forms" ;;
                  *) 
                    # Check changed files to determine packages
                    changed_files=$(git show --name-only --pretty=format: $commit_hash)
                    if echo "$changed_files" | grep -q "packages/ui/"; then
                      packages="@eliseoeric/ui"
                    fi
                    if echo "$changed_files" | grep -q "packages/tokens/"; then
                      packages="${packages:+$packages }@eliseoeric/tokens"
                    fi
                    if echo "$changed_files" | grep -q "packages/forms/"; then
                      packages="${packages:+$packages }@eliseoeric/forms"
                    fi
                    ;;
                esac
              else
                # No scope, check changed files
                changed_files=$(git show --name-only --pretty=format: $commit_hash)
                if echo "$changed_files" | grep -q "packages/ui/"; then
                  packages="@eliseoeric/ui"
                fi
                if echo "$changed_files" | grep -q "packages/tokens/"; then
                  packages="${packages:+$packages }@eliseoeric/tokens"
                fi
                if echo "$changed_files" | grep -q "packages/forms/"; then
                  packages="${packages:+$packages }@eliseoeric/forms"
                fi
              fi
              
              # Create changeset if packages affected
              if [[ -n "$packages" ]]; then
                changeset_id="auto-$(date +%s)-$(echo $commit_hash | cut -c1-7)"
                changeset_file=".changeset/${changeset_id}.md"
                
                echo "Creating changeset for: $packages ($bump)"
                
                echo "---" > $changeset_file
                for package in $packages; do
                  echo "\"$package\": $bump" >> $changeset_file
                done
                echo "---" >> $changeset_file
                echo "" >> $changeset_file
                echo "$commit_message" >> $changeset_file
                
                git add $changeset_file
              fi
            fi
          done <<< "$COMMITS"

      - name: Commit changesets
        run: |
          if git diff --staged --quiet; then
            echo "No changesets to commit"
            exit 0
          fi

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -m "chore: auto-generated changesets from conventional commits [skip changeset]"
          git push
